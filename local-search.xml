<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>slide 使用示例</title>
    <link href="/2020/07/30/slide/"/>
    <url>/2020/07/30/slide/</url>
    
    <content type="html"><![CDATA[<h1 id="nodeppt-使用示例"><a href="#nodeppt-使用示例" class="headerlink" title="nodeppt 使用示例"></a>nodeppt 使用示例</h1><iframe src="/nodeppt/dist/nodeppt.html" width="100%" height="500" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe><!-- <iframe src="http://uwrfy5.coding-pages.com/" width="100%" height="500" name="topFrame" scrolling="yes" noresize="noresize" frameborder="0" id="topFrame"></iframe> --><div class="note note-primary">            <p>生成的网页可以使用键盘操作(类似PPT操作)</p><ul><li>页面: ↑/↓/←/→ Space Home End（空格,home键,end键）</li><li>全屏: F</li><li>Overview: -/+</li><li>演讲者笔记: N</li><li>网格背景: Enter</li><li>演讲者模式，在页面 url 后面增加?mode=speaker 既可以打开演讲者模式，双屏同步</li></ul>          </div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/30/hello-world/"/>
    <url>/2020/07/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SmartGit 轻度破解，仅限个人使用</title>
    <link href="/2019/09/17/troubleshooting/register-30-days-expire/"/>
    <url>/2019/09/17/troubleshooting/register-30-days-expire/</url>
    
    <content type="html"><![CDATA[<p>SmartGit 个人使用时，可以免费试用 30 天，通过以下方法可以清楚之前 30 天的使用记录，从而达到长期使用的效果。^_^</p><p>smartGit 用于记录使用日期的文件是： <code>%APPDATA%\syntevo\SmartGit\&lt;version_folder&gt;\settings.xml</code> 所以我们只要找到它将他删除即可。</p><p>使用 运行（Windows + R)，输入 <code>%APPDATA%\syntevo\SmartGit\</code> 定位到 SmartGit 目录, 选择相应的版本号（文件夹），在其中找到 settings.xml 将其删除即可。</p>]]></content>
    
    
    <categories>
      
      <category>TroubleShooting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>SmartGit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Git 中  fatal:refusing to merge unrelated histories</title>
    <link href="/2019/09/17/troubleshooting/fatal-refusing-to-merge-unrelated-histories/"/>
    <url>/2019/09/17/troubleshooting/fatal-refusing-to-merge-unrelated-histories/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我们在没有 clone 的情况下，在本地 Init 了一个新的 Git Folder，在进行 push 操作时出现 <code>fatal:refusing to merge unrelated histories</code> 错误。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这个问题就是因为我们想要将两个不相关的 git history 合并到一起，git 默认是不允许的。<br>我们可以在命令后添加： <code>--allow-unrelated-histories</code> 参数，使 git 不进行该检测。</p><p>例如： master/live 两个 branch 是不想关联的 branch， 我们可以使用以下命令将 master merge 到 live 中：</p><pre><code class="hljs git">&#x2F;&#x2F; switched to branch &#39;live&#39;$ git checkout live&#x2F;&#x2F; merge &#39;master&#39; to &#39;live&#39;$ git merge master --allow-unrelated-histories</code></pre>]]></content>
    
    
    <categories>
      
      <category>TroubleShooting</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js 学习笔记</title>
    <link href="/2019/09/17/study-notes/node-js/"/>
    <url>/2019/09/17/study-notes/node-js/</url>
    
    <content type="html"><![CDATA[<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>Node 利用 JavaScript 的函数式编程特性，实现模块的隔离。</p><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; ... &#125;)();</code></pre><p>使用 <code>module.exports = &lt;functionName&gt;</code> 将函数暴露出去， 调用处用 <code>require(&#39;&lt;module_name&gt;&#39;)</code> 拿到暴露的函数。</p><a id="more"></a><h2 id="基本模块"><a href="#基本模块" class="headerlink" title="基本模块"></a>基本模块</h2><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><p>文件系统模块 <code>fs</code>: 分为<strong>异步方法</strong>和*<strong>同步方法</strong>。</p><ul><li>异步读文件: <code>fs.readFile(&#39;&lt;FileName&gt;&#39;, &#39;utf-8&#39;, function(err, data)&#123; ... &#125;);</code></li><li>同步读文件: <code>var data = fs.readFileSync(&#39;&lt;FileName&gt;&#39;, &#39;utf-8&#39;);</code><br>  错误通过 <code>try &#123;...&#125; catch() &#123;...&#125;</code> 捕获。</li><li>异步写文件: <code>fs.writeFile(&#39;&lt;FileName&gt;&#39;, data, function(err) &#123; ... &#125;);</code><br>  传入的 data 是 String, 默认按 UTF-8 写入，传入的 data 是 Buffer, 则写入二进制文件。</li><li>同步写文件: <code>fs.writeFileSync(&#39;&lt;FileName&gt;&#39;, data);</code></li><li>异步获取文件属性: <code>fs.stat(&#39;&lt;FileName&gt;&#39;, function(err, stat) &#123; ... &#125;);</code></li><li>同步获取文件属性: <code>var stat = fs.statSync(&#39;&lt;FileName&gt;&#39;);</code></li></ul><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>数据流读取/写入 <code>fs.createReadStream</code>, <code>fs.createWriteStream</code></p><p>管道连接 <code>readable.pipe(writeable, &#123;end:true/false&#125;);</code></p><h3 id="http"><a href="#http" class="headerlink" title="http"></a>http</h3><ul><li><code>http</code> 模块 - 提供 <code>request</code> 和 <code>response</code> 对象<br>  <code>http.createServer(function(request, response) &#123;...&#125;);</code> 创建 Web Server</li><li><code>url</code> 模块 - web 路径</li><li><code>path</code> 模块 - 本地文件目录</li></ul><h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><p><code>crypto</code> 提供 加密和哈希算法。</p><ul><li><code>crypto.createHash(&#39;md5&#39;);</code> - 哈希算法 MD5及SHA1</li><li><code>crypto.createHmac(&#39;sha256&#39;, &#39;secret-key&#39;);</code> - 哈希算法 Hmac 需要额外的一个密钥</li><li><code>crypto.createCipher(&#39;aes192&#39;, &#39;secret-key&#39;);</code> - AES 对称加密算法, 加解密用同一个密钥</li><li><code>crypto.createDiffieHellman(prime, generator);</code> - DH 算法，密钥交换协议，双方在不泄露密钥的情况下生成一个密钥</li><li><code>crypto.create</code> - 非对称算法，RSA 一个公钥和一个私钥构成密钥对<br>  RSA 不适合加密大数据，对于大数据加密，先生成一个 AES 密钥加密大数据，然后用 RSA 加密 AES 密钥，实际使用时，传输 AES 和 RSA 2 份密钥。</li></ul><h2 id="Web-开发"><a href="#Web-开发" class="headerlink" title="Web 开发"></a>Web 开发</h2><h3 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h3><p>未完，待续 …</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>相关代码请参考：<a href="https://github.com/v-tawe/v-tawe.github.io/tree/master/sample-code/study-notes/node-js">Node.js 示例代码</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL 学习笔记</title>
    <link href="/2019/09/17/study-notes/sql/"/>
    <url>/2019/09/17/study-notes/sql/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL-简介"><a href="#SQL-简介" class="headerlink" title="SQL 简介"></a>SQL 简介</h2><p>SQL = Structured Query Language</p><p>总的来说，SQL语言定义了这么几种操作数据库的能力：</p><ul><li><p>DDL：Data Definition Language</p><p>  DDL允许用户定义数据，也就是创建表、删除表、修改表结构这些操作。通常，DDL由数据库管理员执行。</p></li><li><p>DML：Data Manipulation Language</p><p>  DML为用户提供添加、删除、更新数据的能力，这些是应用程序对数据库的日常操作。</p></li><li><p>DQL：Data Query Language</p><p>  DQL允许用户查询数据，这也是通常最频繁的数据库日常操作。</p></li></ul><a id="more"></a><h2 id="数据库类别"><a href="#数据库类别" class="headerlink" title="数据库类别"></a>数据库类别</h2><ul><li>关系型数据库(SQL)</li><li>非关系型数据库(NoSQL) - MongoDB, Cassandra, Dynamo</li></ul><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>主键是关系表中记录的唯一标识。选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。</p><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;student&gt;<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> &lt;pk_id&gt;PRIMARY <span class="hljs-keyword">KEY</span> (&lt;<span class="hljs-keyword">id</span>&gt;);</code></pre><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键是用来关联 2 个表结构的，表直接的约束分为以下 3 种：</p><ol><li>一对一</li><li>一对多 - 外键建立在‘多’的表中(即从表)</li><li>多对多 - 需要建立中间表</li></ol><ul><li><p>创建外键</p>  <pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;student&gt;<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> &lt;fk_class_id&gt;<span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (&lt;class_id&gt;)<span class="hljs-keyword">REFERENCES</span> classes (&lt;<span class="hljs-keyword">id</span>&gt;);</code></pre></li><li><p>删除外键</p>  <pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;students&gt;<span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> &lt;fk_class_id&gt;;</code></pre></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;students&gt;<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> &lt;idx_name_score&gt; (&lt;<span class="hljs-keyword">name</span>&gt;, &lt;score&gt;);</code></pre><ul><li><p>唯一索引</p>  <pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;students&gt;<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> &lt;uni_name&gt; (&lt;<span class="hljs-keyword">name</span>&gt;);</code></pre></li></ul><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><p>根据业务要求，像身份号、手机号、邮箱地址等，它们具有业务含义不易作为主键，但是又具有唯一性：即不能出现两条记录存储了同一个身份证号。这个时候，就可以给该列添加一个唯一约束。</p><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> &lt;students&gt;<span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> &lt;uni_name&gt;<span class="hljs-keyword">UNIQUE</span> (&lt;<span class="hljs-keyword">name</span>&gt;);</code></pre><h3 id="SQL-查询"><a href="#SQL-查询" class="headerlink" title="SQL 查询"></a>SQL 查询</h3><p>不带 <code>FROM</code> 子句的 <code>SELECT</code> 语句有一个有用的用途，就是用来判断当前到数据库的连接是否有效。许多检测工具会执行一条 <code>SELECT 1;</code> 来测试数据库连接。</p><ol><li><p>基本查询 - <code>SELECT * FROM &lt;students&gt;</code></p></li><li><p>条件查询 - <code>SELECT * FROM &lt;students&gt; WHERE id = 1</code></p></li><li><p>投影查询 - <code>SELECT id, name FROM &lt;students&gt;</code></p></li><li><p>排序 - <code>SELECT * FROM &lt;students&gt; ORDER BY id DESC</code><br> NOTE: <code>OREDER BY</code> 要在 <code>WHERE</code> 条件后</p></li><li><p>分页查询 - <code>SELECT * FROM &lt;students&gt; LIMIT &lt;10&gt; OFFSET &lt;0&gt;</code><br> <code>pageSize</code> - <code>LIMIT</code><br> <code>pageIndex</code> - <code>OFFSET</code>=<code>pageSize * (pageIndex - 1)</code>, <code>pageIndex</code> 从 <code>1</code> 开始，而 <code>OFFSET</code> 从 <code>0</code> 开始。</p></li><li><p>聚合查询<br> 聚合函数：<code>COUNT(), SUM(), AVG(), MAX(), MIN()</code><br> 通过 <code>GROUP BY</code> 进行分组<br> <code>SELECT &lt;class_id&gt;, &lt;gender&gt;, COUNT(*) num FROM &lt;students&gt; GROUP BY &lt;class_id&gt;, &lt;gender&gt;;</code></p></li><li><p>多表查询 - <code>SELECT * FROM &lt;students&gt;, &lt;classes&gt;;</code> 获得的集合为 A 表行数 * B 表行数</p></li><li><p>连接查询</p><ul><li><p>内连接(INNER JOIN)</p></li><li><p>外连接(OUTER JOIN)</p><ul><li>左连接(LEFT OUTER JOIN)</li><li>右连接(RIGHT OUTER JOIN)</li><li>全连接(FULL OUTER JOIN)</li></ul><table><thead><tr><th align="center">INNER JOIN</th><th align="center">LEFT OUTER JOIN</th><th align="center">RIGHT OUTER JOIN</th><th align="center">FULL OUTER JOIN</th></tr></thead><tbody><tr><td align="center">两张表都存在的记录</td><td align="center">左表存在的记录</td><td align="center">右表存在的记录</td><td align="center">左右表都存在的记录</td></tr><tr><td align="center"><img src="/2019/09/17/study-notes/sql/INNER_JOIN.png" class="" title="INNER_JOIN"></td><td align="center"><img src="/2019/09/17/study-notes/sql/LEFT_OUTER_JOIN.png" class="" title="LEFT_OUTER_JOIN"></td><td align="center"><img src="/2019/09/17/study-notes/sql/RIGHT_OUTER_JOIN.png" class="" title="RIGHT_OUTER_JOIN"></td><td align="center"><img src="/2019/09/17/study-notes/sql/FULL_OUTER_JOIN.png" class="" title="FULL_OUTER_JOIN"></td></tr></tbody></table><!--    | ![](INNER_JOIN.png) | ![](LEFT_OUTER_JOIN.png) | ![](RIGHT_OUTER_JOIN.png) | ![](FULL_OUTER_JOIN.png) | --></li></ul></li></ol><h3 id="SQL-修改"><a href="#SQL-修改" class="headerlink" title="SQL 修改"></a>SQL 修改</h3><p>关系数据库的基本操作就是增删改查，即 <code>CRUD：Create、Retrieve、Update、Delete</code>。</p><p>对于增、删、改，对应的SQL语句分别是：</p><ul><li><code>INSERT</code>：插入新记录 - <code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code></li><li><code>UPDATE</code>：更新已有记录 - <code>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</code></li><li><code>DELETE</code>：删除已有记录 - <code>DELETE FROM &lt;表名&gt; WHERE ...;</code></li></ul><h2 id="常用-SQL-语句"><a href="#常用-SQL-语句" class="headerlink" title="常用 SQL 语句"></a>常用 SQL 语句</h2><h3 id="数据库-表操作-SQL-语句"><a href="#数据库-表操作-SQL-语句" class="headerlink" title="数据库 + 表操作 SQL 语句"></a>数据库 + 表操作 SQL 语句</h3><table><thead><tr><th>SQL 语句</th><th>含义</th></tr></thead><tbody><tr><td>SHOW DATABASES</td><td>列出所有数据库</td></tr><tr><td>CREATE DATABASE <database_name></td><td>创建数据库</td></tr><tr><td>DROP DATABASE <database_name></td><td>删除数据库</td></tr><tr><td>USE <database_name></td><td>切换当前数据库</td></tr><tr><td>SHOW TABLES</td><td>列出所有表</td></tr><tr><td>DESC <table_name></td><td>查看表结构</td></tr><tr><td>SHOW CREATE TABLE <table_name></td><td>查看创建表的 SQL 语句</td></tr><tr><td>DROP TABLE <table_name></td><td>删除表</td></tr><tr><td>ALTER TABLE <table_name> ADD COLUMN <column_name> VARCHAR(10) NOT NULL</td><td>新增列</td></tr><tr><td>ALTER TABLE <table_name> CHANGE COLUMN <column_name> VARCHAR(20) NOT NULL</td><td>修改列属性</td></tr><tr><td>ALTER TABLE <table_name> DROP COLUMN <column_name></td><td>删除列</td></tr><tr><td>EXIT</td><td>退出 MYSQL 连接</td></tr></tbody></table><h3 id="实用-SQL-语句"><a href="#实用-SQL-语句" class="headerlink" title="实用 SQL 语句"></a>实用 SQL 语句</h3><ul><li>插入或替换<br>  <code>REPLACE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;)</code><br>  若 <code>id=1</code> 记录不存在，插入新纪录； 若 <code>id=1</code> 记录存在，当前 <code>id=1</code> 记录被删除，然后再插入新纪录。</li><li>插入或更新<br>  <code>INSERT INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;name&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;) ON DUPLICATE KEY UPDATE &lt;name&gt;=&lt;&#39;xiao_min&#39;&gt;, &lt;...&gt;;</code><br>  若 <code>id=1</code> 记录不存在，插入新纪录； 若 <code>id=1</code> 记录存在，当前 <code>id=1</code> 记录被更新，更新字段有 <code>UPDATE</code> 指定。</li><li>插入或忽略<br>  <code>INSERT IGNORE INTO &lt;students&gt; (&lt;id&gt;, &lt;class_id&gt;, &lt;...&gt;) VALUES(&lt;1&gt;, &lt;1&gt;, &lt;...&gt;);</code><br>  若 <code>id=1</code>记录不存在，<code>INSERT</code> 语句将插入新记录，否则，不执行任何操作。</li><li>快照<br>  <code>CREATE TABLE &lt;students_of_class1&gt; SELECT * FROM &lt;students&gt; WHERE &lt;class_id&gt;=&lt;1&gt;;</code><br>  通过查询集合创建新表</li></ul><h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><p>多条语句作为一个整体进行操作的功能，被称为数据库事务。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些 SQL 一样，不会对数据库数据有任何改动。</p><ul><li><code>BEGIN</code> 开启一个事务</li><li><code>COMMIT</code> 提交一个事务</li><li><code>ROLLBACK</code> 回滚事务</li></ul><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ul><li><strong>脏读 DIRTY READ</strong>： 查询同一记录，2 次结果<strong>不一样</strong>，读到还未 commit 的数据结果；</li><li><strong>不可重复读 NON REPEATABLE READ</strong>： 查询同一记录，2 次结果<strong>不一样</strong>，读到的结果在另一事务 commit/rollback 之间；</li><li><strong>幻读 PHANTOM READ</strong>：查询同一记录，2 次结果是<strong>一样</strong>，但是会出现 事务 A 新增的列，事务 B 读不到(<code>SELECT</code>)，但是却可以更新(<code>UPDATE</code>)，更新后才可以读到。</li></ul><table><thead><tr><th align="center">ISOLATION LEVEL</th><th align="center">DIRTY READ</th><th align="center">NON REPEATABLE READ</th><th align="center">PHANTOM READ</th></tr></thead><tbody><tr><td align="center">READ UNCOMMITTED</td><td align="center">YES</td><td align="center">YES</td><td align="center">YES</td></tr><tr><td align="center">READ COMMITTED</td><td align="center">-</td><td align="center">YES</td><td align="center">YES</td></tr><tr><td align="center">Repeatable Read</td><td align="center">-</td><td align="center">-</td><td align="center">YES</td></tr><tr><td align="center">Serializable</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr></tbody></table><p><strong>Serializable</strong> 虽然隔离级别最高，但是效率会大大下降。</p>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 学习笔记</title>
    <link href="/2019/09/16/study-notes/javascript/"/>
    <url>/2019/09/16/study-notes/javascript/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript-布局"><a href="#JavaScript-布局" class="headerlink" title="JavaScript 布局"></a>JavaScript 布局</h2><ul><li><p>通常 JavaScript 代码可以放到 <code>&lt;head&gt; &lt;/head&gt;</code> 中；</p>  <pre><code class="hljs javascript">&lt;html&gt;  &lt;head&gt;      &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;          alert(<span class="hljs-string">&#x27;Hello World&#x27;</span>);      &lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;      ...  &lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p><code>type</code> 默认属性即为：<code>JavaScript</code>, 所以可以不必显示指定。</p></blockquote></li><li><p>将 JavaScript 代码放到单独的 <code>.js</code> 文件中；</p>  <pre><code class="hljs javascript">&lt;html&gt;  &lt;head&gt;      &lt;script src=<span class="hljs-string">&quot;/static/js/abc.js&quot;</span>&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;      ...  &lt;/body&gt;&lt;/html&gt;</code></pre><a id="more"></a><h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2></li></ul><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><code>==</code> ： 自动转换数据类型在比较；<br><code>===</code> ： 如果数据类型不一致，返回 <code>false</code>；</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>使用 `xxxxxxx` 标识多行字符串：</p><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hello</span><span class="hljs-string">World</span><span class="hljs-string">!`</span>);</code></pre><p>可以用 <code>&#123;$variable&#125;</code> 替换字符串中的变量：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;Bob&#x27;</span>;<span class="hljs-keyword">var</span> age = <span class="hljs-number">20</span>;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;name&#125;</span>, you are <span class="hljs-subst">$&#123;age&#125;</span> years old!`</span>);</code></pre><p>对字符串的操作本身不会改变自身，而是返回一个新的字符串；</p><p><code>str.toUpperCase()</code> - 转变为大写<br><code>str.toLowerCase()</code> - 转变为小写<br><code>str.indexOf(&#39;string&#39;)</code> - 获取指定字符串出现的位置<br><code>str.substring(startIndex, length)</code> - 获取截取的字符串</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>通过索引进行赋值可以直接修改这个 Array：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>];arr[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span>;arr; <span class="hljs-comment">//arr now is [&#x27;A&#x27;, 100, &#x27;C&#x27;];</span></code></pre><p><code>indexOf(value)</code> - 搜索指定值的索引；<br><code>slice(startIndex, length)</code> - 类似于 String 的 <code>substring()</code>；<br><code>push(&#39;value1&#39;, &#39;value2&#39;)</code> - 末尾添加值；<br><code>pop()</code> - 删除最有一个值；<br><code>sort()</code> - 排序；<br><code>reverse()</code> - 反转数组；<br><code>splice(startIndex, deleteNum, replaceValue1, replaceValue2)</code> - 从指定的索引开始删除若干值，然后再从该位置添加若干值；<br><code>concat(newArray)</code> - 连接两个 Array;<br><code>join(connectValue)</code> - 每个值用指定的字符串连接，返回一个连接后的字符串</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript 对象是动态类型，可以添加或删除属性;</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;    name: <span class="hljs-string">&#x27;David&#x27;</span>,    age: <span class="hljs-string">&#x27;20&#x27;</span>,&#125;;person.gender = <span class="hljs-string">&#x27;male&#x27;</span>; <span class="hljs-comment">// 新增 gender 属性</span><span class="hljs-keyword">delete</span> person.age; <span class="hljs-comment">// 删除 age 属性</span></code></pre><p>使用 <code>in</code>/<code>hasOwnProperty()</code> 检测是否拥有某属性：</p><p><code>in</code> - 包括继承的属性, 例如： <code>toString</code> 是 <code>object</code> 对象的属性，结果也是 <code>true</code>;<br><code>hasOwnProperty()</code> - 必须是自身拥有的属性</p><pre><code class="hljs javascript"><span class="hljs-string">&#x27;age&#x27;</span> <span class="hljs-keyword">in</span> person; <span class="hljs-comment">//true</span><span class="hljs-string">&#x27;birth&#x27;</span> <span class="hljs-keyword">in</span> person; <span class="hljs-comment">//false</span>person.hasOwnProperty(<span class="hljs-string">&#x27;age&#x27;</span>); <span class="hljs-comment">//true</span>person.hasOwnProperty(<span class="hljs-string">&#x27;toString&#x27;</span>); <span class="hljs-comment">//true</span></code></pre><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><code>for(i=index; i&lt;length; i++)</code>;</li><li><code>for (var key in object)</code>;</li><li><code>while(condition)</code>;</li><li><code>do &#123;...&#125; while(condition)</code>;</li></ul><h3 id="Map-amp-Set"><a href="#Map-amp-Set" class="headerlink" title="Map &amp; Set"></a>Map &amp; Set</h3><p><code>Map</code> - 键值对集合；</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>([[<span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-number">100</span>], [<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">10</span>]]);m.get(<span class="hljs-string">&#x27;David&#x27;</span>); <span class="hljs-comment">//100</span>m.set(<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-number">99</span>); <span class="hljs-comment">//添加新的 key-value</span>m.has(<span class="hljs-string">&#x27;Bob&#x27;</span>); <span class="hljs-comment">//true</span>m.delete(<span class="hljs-string">&#x27;Adam&#x27;</span>) <span class="hljs-comment">//删除 key-&#x27;Adam&#x27;</span></code></pre><p><code>Set</code> - Key 的集合，Key 不能重复，没有索引；</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;3&#x27;</span>]);s.add(<span class="hljs-number">4</span>); <span class="hljs-comment">// Set &#123;1, 2, 3, &#x27;3&#x27;, 4&#125;</span>s.delete(<span class="hljs-number">3</span>); <span class="hljs-comment">// Set &#123;1, 2, &#x27;3&#x27;, 4&#125;</span></code></pre><h3 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h3><p>新的 <code>iterable</code> 类型，<code>Array</code>、<code>Map</code> 和 <code>Set</code> 都属于 <code>iterable</code> 类型。</p><p><code>for ... of</code> 循环 解决 <code>for ... in</code> 循环的历史遗留问题:</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>];a.name = <span class="hljs-string">&#x27;David&#x27;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> a) &#123;    <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;name&#x27;</span>&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">of</span> a) &#123;    <span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;</span>&#125;a.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">element, index, array</span>) </span>&#123;    <span class="hljs-comment">// element: 指向当前元素的值；</span>    <span class="hljs-comment">// index：指向当前索引；</span>    <span class="hljs-comment">// array：指向 Array 对象本身</span>&#125;)</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>2 种定义方法：</p><ul><li><code>function abs(x) &#123; ... &#125;</code></li><li><code>var abs = function(x) &#123; ... &#125;;</code></li></ul><p>参数：</p><ul><li><code>arguments</code> - 用于函数内部，指向传入的所有参数</li><li><code>...rest</code> - 指向传入的未显示指定的参数 <code>function foo(a, b, ...rest)&#123; ... &#125;</code></li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>JavaScript 默认有一个全局对象 <code>window</code>，任何全局变量（函数也视为变量）都会绑定到 <code>window</code> 上。</p><p><code>var</code> - 定义<strong>局部</strong>作用域变量<br><code>let</code> - 定于<strong>块</strong>级作用域变量</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;        <span class="hljs-comment">//</span>    &#125;    i += <span class="hljs-number">100</span>; <span class="hljs-comment">// SyntaxError;</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++) &#123;        <span class="hljs-comment">//</span>    &#125;    i += <span class="hljs-number">100</span>; <span class="hljs-comment">// 仍然可以引用变量i</span>&#125;</code></pre><p><code>const</code> - 常量</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>可以同时赋值多个变量，包括嵌套的数组：</p><p><code>let [x, [y, z]] = [&#39;hello&#39;, [&#39;hi&#39;, &#39;welcome&#39;]];</code></p><p>对象赋值：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;    name: <span class="hljs-string">&#x27;David&#x27;</span>,    age: <span class="hljs-number">20</span>,    gender: <span class="hljs-string">&#x27;male&#x27;</span>,    passport: <span class="hljs-string">&#x27;G-12345678&#x27;</span>,    address: &#123;        city: <span class="hljs-string">&#x27;Beijing&#x27;</span>,        zipcode: <span class="hljs-string">&#x27;100001&#x27;</span>    &#125;&#125;;<span class="hljs-keyword">var</span> &#123;name, <span class="hljs-attr">address</span>: &#123;city, zip&#125;&#125; = person;name; <span class="hljs-comment">// &#x27;David&#x27;</span>city; <span class="hljs-comment">// &#x27;Beijing&#x27;</span>zip; <span class="hljs-comment">// undefined, 因为属性名是zipcode而不是zip</span><span class="hljs-comment">// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:</span>address; <span class="hljs-comment">// Uncaught ReferenceError: address is not defined</span></code></pre><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>可以将函数作为参数传入：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x, y, abs</span>) </span>&#123;    <span class="hljs-keyword">return</span> abs(x) + abs(y);&#125;</code></pre><h3 id="map-方法"><a href="#map-方法" class="headerlink" title="map 方法"></a>map 方法</h3><p><code>arr.map(function (x) &#123; return abs(x); &#125; )</code> - 依次对数组的每个元素调用指定的函数：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pow</span>(<span class="hljs-params">x</span>) </span>&#123;    <span class="hljs-keyword">return</span> x * x;&#125;<span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];arr.map(pow); <span class="hljs-comment">// [2, 4, 9, 16, 25]</span>arr.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) </span>&#123; <span class="hljs-keyword">return</span> x * x; &#125;); <span class="hljs-comment">// [2, 4, 9, 16, 25]</span>arr.map(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * x); <span class="hljs-comment">// [2, 4, 9, 16, 25]</span></code></pre><h3 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce 方法"></a>reduce 方法</h3><p><code>arr.reduce(function (x, y) &#123; return add(x, y); &#125;)</code> - 分别对数组的进行函数调用，依次往后累计：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];arr.reduce( <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>&#123; <span class="hljs-keyword">return</span> x + y; &#125;); <span class="hljs-comment">// 15</span>arr.reduce( <span class="hljs-function">(<span class="hljs-params">x,y</span>) =&gt;</span> x * y; ) <span class="hljs-comment">// 15</span></code></pre><h3 id="filter-方法"><a href="#filter-方法" class="headerlink" title="filter 方法"></a>filter 方法</h3><p><code>arr.filter(function (x) &#123; return x&gt;99 &#125;)</code> - 通过返回值决定是否保留该元素</p><h3 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort 方法"></a>sort 方法</h3><p><code>arr.sort()</code> - 默认排序按字符串 ASCII 码进行排序（eg. 10 &lt; 2）</p><p><code>arr.sort(function(x,y) &#123; if (x &lt; y) return -1; else if (x &gt; y) return 1; else return 0;&#125;)</code> - 修改排序规则则可以按照数字大小进行排序</p><p><code>sort</code> 方法直接对当前 Array 进行修改。</p><h3 id="every-方法"><a href="#every-方法" class="headerlink" title="every 方法"></a>every 方法</h3><p>判断 Array 中的每个元素是否满足条件</p><p><code>let r = arr.every(funciton (s) &#123; return s.length &gt; 0;&#125;);</code> - 判断 Array 中是否存在空元素</p><h3 id="find-findIndex-方法"><a href="#find-findIndex-方法" class="headerlink" title="find\findIndex 方法"></a>find\findIndex 方法</h3><p>查找 Array 中满足条件的第一个元素\索引</p><p><code>let s = arr.find(function (s) &#123; return s.toLowerCase() === s &#125;);</code> - 返回第一个小写的元素，如果未找到返回 <code>undefinded</code></p><h3 id="foreach-方法"><a href="#foreach-方法" class="headerlink" title="foreach 方法"></a>foreach 方法</h3><p>用于遍历 Array, 没有返回值，也不会改变原 Array, 常用于遍历</p><p><code>arr.forEach(console.log)</code></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>将函数作为结果返回。实现一个计数器的示例：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">counter</span> (<span class="hljs-params">initial</span>) </span>&#123;    <span class="hljs-keyword">var</span> x = initial || <span class="hljs-number">0</span>;    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) <span class="hljs-title">return</span> <span class="hljs-title">x</span> ++;</span><span class="hljs-function">&#125;</span><span class="hljs-function"></span><span class="hljs-function"><span class="hljs-title">var</span> <span class="hljs-title">c</span> = <span class="hljs-title">conter</span>(<span class="hljs-params"><span class="hljs-number">100</span></span>);</span><span class="hljs-function"><span class="hljs-title">c</span>(<span class="hljs-params"></span>); //100</span><span class="hljs-function"><span class="hljs-title">c</span>(<span class="hljs-params"></span>); //101</span></code></pre><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><pre><code class="hljs javascript">(x, y) =&gt; x * y;</code></pre><p>==&gt; 等价于 ==&gt;</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>&#123;    <span class="hljs-keyword">return</span> x * y;&#125;</code></pre><h2 id="generator-生成器"><a href="#generator-生成器" class="headerlink" title="generator 生成器"></a>generator 生成器</h2><p>类似于在一个函数内可以返回多个结果</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">name</span>(<span class="hljs-params">max</span>) </span>&#123;    <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(index &lt; max) &#123;        <span class="hljs-keyword">yield</span> index++;    &#125;    <span class="hljs-keyword">return</span> index;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x <span class="hljs-keyword">of</span> name()) &#123;    <span class="hljs-built_in">console</span>.log(x);&#125;</code></pre><h2 id="标准对象"><a href="#标准对象" class="headerlink" title="标准对象"></a>标准对象</h2><p><code>number</code>, <code>string</code>, <code>boolean</code>, <code>function</code>, <code>underfined</code>, <code>object</code> - (<code>Array</code>, <code>null</code> 均属于 <code>object</code>）</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><code>var date = new Date(2019, 6, 12);</code> - 2019/07/12</p><p>JavaScript 的 Date 对象月份值从 0 开始，牢记 0=1 月，1=2 月，2=3 月，……，11=12 月。</p><h3 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h3><h4 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h4><p><code>\d</code> - 数字<br><code>\w</code> - 字母或数字<br><code>\s</code> - 空格</p><p><code>.</code> - 任意字符<br><code>*</code> - 任意个字符(包括 0 个)<br><code>+</code> - 至少一个字符<br><code>?</code> - 0 或 1 个字符<br><code>&#123;n&#125;</code> - n 个字符<br><code>&#123;n, m&#125;</code> - n~m 个字符</p><p><code>[]</code> - 表示范围<br><code>[0-9a-zA-Z]</code> - 数字及字母<br><code>A|B</code> - A 或 B<br><code>^</code> - 以…开头<br><code>$</code> - 以…结尾</p><p><code>()</code> - 定义组</p><h4 id="RegExp-1"><a href="#RegExp-1" class="headerlink" title="RegExp"></a>RegExp</h4><p><code>test()</code> 方法测试字符串是否符合正则表达式</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> re = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;^\d&#123;3&#125;\-\d&#123;3-8&#125;$&#x27;</span>);<span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^\d&#123;3&#125;\-\d&#123;3-8&#125;$/</span>;re.test(<span class="hljs-string">&#x27;010-12345&#x27;</span>); <span class="hljs-comment">// true</span></code></pre><p><code>exec()</code> 方法提取正则表达式中定义的组, 失败返回 null</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/</span>;re.exec(<span class="hljs-string">&#x27;010-12345&#x27;</span>); <span class="hljs-comment">// [&#x27;010-12345&#x27;, &#x27;010&#x27;, &#x27;12345&#x27;]</span>re.exec(<span class="hljs-string">&#x27;010 12345&#x27;</span>); <span class="hljs-comment">// null</span></code></pre><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^[0-9a-zA-Z\.]+@.+\.\w+$/</span>; <span class="hljs-comment">// 匹配邮箱 v-tawe@microsoft.com</span><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/^\&lt;(.+)\&gt;\s+([0-9a-zA-Z\.]+@.+\.\w+)$/</span>; <span class="hljs-comment">// 匹配带名字的邮箱 &lt;David Tang&gt; v-tawe@microsoft.com</span></code></pre><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>序列化 - <code>JSON.parse(&#39;json&#39;)</code><br>反序列化 - <code>JSON.stringify(obj)</code></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>两种创建对象的方式：</p><p>通过数据类型对象创建：</p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> Student = &#123;    name: <span class="hljs-string">&#x27;Robot&#x27;</span>;    height: <span class="hljs-number">1.2</span>;    run: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;is running&#x27;</span>;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createStudent</span>(<span class="hljs-params">name</span>) </span>&#123;    <span class="hljs-keyword">var</span> s = <span class="hljs-built_in">Object</span>.create(Student);    s.name = name;    <span class="hljs-keyword">return</span> s;&#125;<span class="hljs-keyword">var</span> xiaoming = createStudent(<span class="hljs-string">&#x27;xiaoming&#x27;</span>);xiaoming.run(); <span class="hljs-comment">//xiaoming is runing</span></code></pre><p>通过构造函数实现：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">props</span>) </span>&#123;    <span class="hljs-built_in">this</span>.name = props.name || <span class="hljs-string">&#x27;Robot&#x27;</span>;    <span class="hljs-built_in">this</span>.height  = props.height || <span class="hljs-string">&#x27;1.2&#x27;</span>;&#125;Student.prototype.run = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;is running&#x27;</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createStudent</span>(<span class="hljs-params">props</span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Student(props || &#123;&#125;)&#125;</code></pre><p>通过 class 实现：</p><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">constructor</span>(name) &#123;        <span class="hljs-built_in">this</span>.name = name;    &#125;    run() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;is running&#x27;</span>;    &#125;&#125;</code></pre><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><p>定义新的构造函数，并在内部调用继承的构造函数的 <code>call()</code> 方法绑定<code>this</code>;</p><!--![inherits](javascript/inherits.png)--><img src="/2019/09/16/study-notes/javascript/inherits.png" class="" title="inherits"><p>只有函数才有 <code>prototype</code> 属性, <code>_proto_</code> 是所有对象都有的（包括函数）, 即对象原型 <code>xxx.constructor</code>。</p><p>通过构造函数实现继承：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherits</span>(<span class="hljs-params">Child, Father</span>) </span>&#123;    <span class="hljs-keyword">var</span> F = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;    F.prototype = Father.prototype;    Child.prototype = <span class="hljs-keyword">new</span> F();    Child.prototype.constructor = Child;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span>(<span class="hljs-params">props</span>) </span>&#123;    <span class="hljs-built_in">this</span>.name = props.name || <span class="hljs-string">&#x27;unnamed&#x27;</span>;    <span class="hljs-built_in">this</span>.height = props.height || <span class="hljs-number">1.2</span>;&#125;Student.prototype.run = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&#x27;is running&#x27;</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PrimaryStudent</span>(<span class="hljs-params">props</span>) </span>&#123;    Student.call(<span class="hljs-built_in">this</span>, props);    <span class="hljs-built_in">this</span>.grade = props.grade || <span class="hljs-number">1</span>;&#125;inherits(PrimaryStudent, Student);PrimaryStudent.prototype.getGrade = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.grade;&#125;</code></pre><p>通过 class 实现继承：</p><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrimaryStudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">constructor</span>(props) &#123;        <span class="hljs-built_in">super</span>(props);        <span class="hljs-built_in">this</span>.grade = props.grade || <span class="hljs-number">1</span>;    &#125;    getGrade() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.grade;    &#125;&#125;</code></pre><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><p>需要支持 ES6</p><ul><li>浏览器窗口： <code>windows</code>： <code>windows.innerWidth; windows.innerHeight</code>;</li><li>浏览器信息： <code>navigator</code>: <code>navigator.appName; navigator.appVersion</code>…;</li><li>屏幕信息： <code>screen</code>: <code>screen.width; screen.height</code>…;</li><li>当前页面 URL 信息: <code>location</code>: <code>location.protocol; location.host</code>…;</li><li>DOM 对象: <code>document</code>: <code>document.title; document.cookie</code>…;<ul><li><code>document.getElementById();</code> - 根据 ID 获取 DOM 节点</li><li><code>document.getElementsByTagName();</code> - 根据 Tag 名词获取 DOM 节点</li><li><code>document.cookie</code> - 获取 cookie 信息，服务器端使用 <code>httpOnly</code> 可以禁止 JS 读取 Cookie;</li></ul></li><li>浏览器历史： <code>history</code>: <code>history.back(); history.forward();</code> <strong>历史遗留对象已弃用！！</strong></li></ul><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> d = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;id&#x27;</span>);<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;p&#x27;</span>);<span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;class&#x27;</span>);<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;#id&#x27;</span>);<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">&#x27;div.class &gt; p&#x27;</span>);d.children; <span class="hljs-comment">// 获取 id 下的所有子节点</span>d.firstElementChild; <span class="hljs-comment">// 获取 id 下的第一个子节点</span><span class="hljs-comment">// 更新 DOM</span>d.innerHTML = <span class="hljs-string">&#x27;ABC &lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt; XYZ&#x27;</span>; <span class="hljs-comment">// 可以设置 HTML 标签</span>d.innerText = <span class="hljs-string">&#x27;ABC XYZ&#x27;</span>;<span class="hljs-comment">//// 设置 CSS</span>d.style.color = <span class="hljs-string">&#x27;#ff0000&#x27;</span>;d.style.fontSize = <span class="hljs-string">&#x27;20px&#x27;</span>;<span class="hljs-comment">// 插入 DOM</span><span class="hljs-keyword">var</span> div1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;p&#x27;</span>);div1.id = <span class="hljs-string">&#x27;div1&#x27;</span>;div1.innerText = <span class="hljs-string">&#x27;DIV1&#x27;</span>;d.appendChild(div1);<span class="hljs-keyword">var</span> ref = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;ref&#x27;</span>);d.insertBefore(div1, ref);<span class="hljs-comment">// 删除 DOM</span><span class="hljs-keyword">var</span> parent = d.parentElement;<span class="hljs-comment">// 删除节点时 children 节点实时变化</span>parent.removeChild(parent.children[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 删除节点 0</span>parent.removeChild(parent.children[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 删除节点 1</span></code></pre><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>没有 <code>name</code> 属性的表单控件不会提交。</p><p>表单控件</p><ul><li><code>&lt;input type=&#39;text&#39;&gt;&lt;/input&gt;</code></li><li><code>&lt;input type=&#39;password&#39;&gt;&lt;/input&gt;</code></li><li><code>&lt;input type=&#39;radio&#39;&gt;&lt;/input&gt;</code></li><li><code>&lt;input type=&#39;checkbox&#39;&gt;&lt;/input&gt;</code></li><li><code>&lt;input type=&#39;hidden&#39;&gt;&lt;/input&gt;</code></li><li><code>&lt;select&gt;&lt;/select&gt;&lt;/input&gt;</code></li></ul><p>获取值</p><ul><li><code>text, password, hidden, select</code> 使用 <code>value</code> 获取值</li><li><code>select</code> 使用 <code>checked</code> 获取值</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p><code>&lt;input type=&#39;file&#39;&gt;&lt;/input&gt;</code></p><h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>只支持同源策略访问，跨域需要使用 CORS 策略。</p><ol><li>创建 <code>XMLHttpRequest</code> 对象；</li><li>设置 <code>onreadystatechange</code> 回调函数；</li><li>通过 <code>readyState === 4</code> 判断请求是否完成；</li><li>根据 <code>status === 2000</code> 判断是否成功响应；</li><li>调用 <code>open()</code> 方法, 参数1： <code>GET/POST</code>; 参数2： URL 地址； 参数3：是否异步（默认 true);</li><li>调用 <code>send()</code> 方法发送请求；</li></ol><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> XMLHttpRequest(); <span class="hljs-comment">// 新建 AJAX 对象</span><span class="hljs-comment">// 状态发生变化时，函数被回调</span>request.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">if</span> (request.readyState === <span class="hljs-number">4</span>) &#123; <span class="hljs-comment">// 成功</span>        <span class="hljs-comment">// 判断响应结果</span>        <span class="hljs-keyword">if</span> (request.status === <span class="hljs-number">200</span>) &#123;            <span class="hljs-comment">// 成功，responseText - 响应文本</span>            <span class="hljs-keyword">return</span> success(request.responseText);        &#125;        <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">// 失败</span>            <span class="hljs-keyword">return</span> fail(request.status);        &#125;    &#125;&#125;<span class="hljs-comment">// 发送请求</span>request.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/api/categories&#x27;</span>);request.send();</code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ajax</span>(<span class="hljs-params">method, url, data</span>) </span>&#123;    <span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> XMLHttpRequest();    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;        request.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">if</span> (request.readyState === <span class="hljs-number">4</span>) &#123;                <span class="hljs-keyword">if</span> (request.status === <span class="hljs-number">200</span>) &#123;                    resolve(request.responseText);                &#125;                <span class="hljs-keyword">else</span> &#123;                    reject(request.status);                &#125;            &#125;        &#125;;    request.open(method, url);    request.send(data);    &#125;);&#125;<span class="hljs-keyword">var</span> p = ajax(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/api/categories&#x27;</span>);p.then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">text</span>) </span>&#123;    log.innerText = text;&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">status</span>) </span>&#123;    log.innerText =<span class="hljs-string">&#x27;ERROR&#x27;</span> + status;&#125;)</code></pre><p>并行执行： <code>Promise.all()</code><br>容错执行： <code>Promise.race()</code></p><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;    ...&#125;)<span class="hljs-keyword">var</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>&#123;    ...&#125;)<span class="hljs-comment">// p1, p2 均执行成功后，执行 then</span><span class="hljs-built_in">Promise</span>.all([p1, p2]).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">results</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(results);&#125;)<span class="hljs-comment">// p1, p2 同时执行，先执行成功的返回结果给 then，后执行成功的结果丢失</span><span class="hljs-built_in">Promise</span>.race([p1, p2]).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) </span>&#123;    <span class="hljs-built_in">console</span>.log(result);&#125;)</code></pre><h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><ul><li>按 ID 查找： <code>$(&#39;#id&#39;)</code></li><li>按 class 查找： <code>$(&#39;.class&#39;)</code></li><li>按 Tag 查找： <code>$(&#39;tag&#39;)</code></li><li>按属性查找： <code>$(&#39;[name=email]&#39;)</code>; <code>$(&#39;[type=password]&#39;)</code><ul><li><code>$(&#39;[name^=icon])</code>: 查找 name 属性以 icon 开头的 DOM;</li><li><code>$(&#39;[name$=with]&#39;)</code>: 查找 name 属性以 with 结尾的 DOM;</li></ul></li><li>组合查找： <code>$(&#39;input[name=email]&#39;)</code>; <code>$(&#39;tr.red&#39;)</code></li><li>多项选择器： <code>$(&#39;p, div&#39;)</code>; <code>$(&#39;p.red, p.green&#39;)</code>; <code>$(&#39;input[name=email],[name=password]&#39;)</code></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li><p>层级选择器 用 空格 隔开： <code>$(&#39;ul li.class&#39;)</code></p></li><li><p>子选择器 用 &gt; 隔开： <code>$(&#39;ul &gt; li.class&#39;)</code></p><p>  层级选择器 和 子选择器的区别在： 子选择器必须时父子关系，不可跨层级选择！</p></li><li><p>过滤器 用 : 隔开： <code>$(&#39;ul li:first-child&#39;)</code>;  <code>$(&#39;ul li:last-child&#39;)</code>; <code>$(&#39;ul li:nth-child(2)&#39;)</code>; <code>$(&#39;ul li:nth-child(even)&#39;)</code></p></li></ul><h3 id="表单相关"><a href="#表单相关" class="headerlink" title="表单相关"></a>表单相关</h3><ul><li><code>:input</code> - <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;button&gt;</code></li><li><code>:file</code> - <code>input[type=file]</code></li><li><code>:checkbox</code> - <code>input[type=checkbox]</code></li><li><code>:radio</code> - <code>input[type=radio]</code></li><li><code>:focus</code> - 获取鼠标当前的焦点控件 <code>input:focus</code></li><li><code>:checked</code> - 已选择的单选或复选框控件 <code>input[type=radio]:checked</code></li><li><code>:enabled</code> - 可以正常输入的控件</li><li><code>:disabled</code> - 已被禁用的控件</li><li><code>:visible</code> - 可见的控件</li><li><code>:hidden</code> - 隐藏的控件</li><li>… …</li></ul><h3 id="查找-amp-过滤"><a href="#查找-amp-过滤" class="headerlink" title="查找 &amp; 过滤"></a>查找 &amp; 过滤</h3><ul><li><p><code>find()</code> - 在所有子节点中进行查找</p></li><li><p><code>parent()</code> - 从当前节点向上查找</p></li><li><p><code>next()</code> &amp; <code>prev()</code> - 同一层级节点前后进行查找</p></li><li><p><code>filter()</code> - 过滤掉不符合条件的节点</p></li><li><p><code>map()</code> - 把一个 jQuery 对象包含的若干 DOM 节点转化为其他对象</p></li><li><p><code>first()</code> &amp; <code>last()</code> &amp; <code>slice(2, 4)</code> - 截取 jQuery 对象</p></li></ul><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li><p><code>text()</code> &amp; <code>html()</code> - 获取或修改 text 或 html</p></li><li><p><code>val()</code> - 获取或修改 value 属性</p></li><li><p><code>css()</code> - 获取或修改 css</p></li><li><p><code>hide()</code> &amp; <code>show()</code> - 隐藏或显示元素; 增加参数可以实现淡入淡出效果： <code>hide(&#39;slow&#39;)</code> / <code>show(&#39;slow&#39;)</code></p></li><li><p><code>attr()</code> &amp; <code>removeAttr()</code> - 修改 DOM 属性</p></li><li><p><code>prop()</code> - 与 attr() 类似</p></li><li><p><code>append()</code> &amp; <code>prepend()</code> - 添加 DOM 节点</p></li><li><p><code>before()</code> &amp; <code>after()</code> - 在当前元素前/后插入 DOM 节点</p></li><li><p><code>remove()</code> - 删除节点</p></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>绑定事件：</p><ul><li><code>$(&#39;#id&#39;).on(&#39;click&#39;, function() &#123; alert(&#39;Hello, World&#39;); &#125;);</code></li><li><code>$(&#39;#id&#39;).click(function() &#123; alert(&#39;Hello, World&#39;); &#125;);</code></li></ul><p>事件类型：</p><ul><li><p><code>click</code> - 单击</p></li><li><p><code>dblclick</code> - 双击</p></li><li><p><code>mouseenter</code> - 鼠标移入</p></li><li><p><code>mouseleave</code> - 鼠标移除</p></li><li><p><code>mousemove</code> - 鼠标在 DOM 内移动</p></li><li><p><code>hover</code> - <code>mouseenter</code> + <code>mouseleave</code></p></li><li><p><code>keydown</code> - 键盘按下</p></li><li><p><code>keyup</code> - 键盘松开</p></li><li><p><code>keypress</code> - 按一次键触发</p></li><li><p><code>focus</code> - DOM 获得焦点</p></li><li><p><code>blur</code> - DOM 失去焦点</p></li><li><p><code>change</code> - DOM 内容变更</p></li><li><p><code>submit</code> - form 提交</p></li><li><p><code>ready</code> - 页面载入并且 DOM 树初始化后 仅作用于 document 对象</p><p>  <code>$(document).ready(function() &#123;...&#125;);</code><br>  简化后：<br>  <code>$(function() &#123;...&#125;);</code></p></li><li><p><code>off(&#39;click&#39;, &lt;functionName&gt;)</code> 取消事件绑定</p></li></ul><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><ul><li><p><code>show(&#39;slow&#39;) / hide(&#39;slow&#39;) / toogle(&#39;slow&#39;)</code> - 左上角缓慢收缩</p></li><li><p><code>slideUp(&#39;slow&#39;) / SlideDown(&#39;slow&#39;) / slideToogle(&#39;slow&#39;)</code> - 垂直缓慢收缩</p></li><li><p><code>fadeIn(&#39;slow&#39;) / fadeOut(&#39;slow&#39;) / fadeToggle(&#39;slow&#39;)</code> - 淡入淡出</p></li><li><p><code>animate()</code> - 自定义效果</p>  <pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#id&#x27;</span>).animate(&#123;  opacity: <span class="hljs-number">0.25</span>,  width: <span class="hljs-number">0</span>px;  height: <span class="hljs-number">0</span>px;&#125;, <span class="hljs-number">1000</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Complete&#x27;</span>); &#125;).delay(<span class="hljs-number">1000</span>).animate(...);</code></pre><p>  可以使用 <code>delay()</code> 实现动画的暂停。</p></li></ul><h3 id="AJAX-1"><a href="#AJAX-1" class="headerlink" title="AJAX"></a>AJAX</h3><ul><li><p><code>$.ajax(async, method, contentType, data, headers, dataType)</code></p></li><li><p><code>$.ajax(async, method, contentType, data, headers, dataType, jsonp:&#39;callback&#39;, jsonpCallback:&#39;callbackFunction&#39;, success: function(data)&#123;...&#125;)</code></p></li><li><p><code>$.get(url)</code></p></li><li><p><code>$.post(url, data)</code></p></li><li><p><code>$.getJSON(url)</code></p></li></ul><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ol><li>使用 <code>$.fn</code> 绑定函数</li><li>使用 <code>return this</code> 实现链式调用</li><li>插件有默认值，绑定在 <code>$.fn.&lt;pluginName&gt;.defaults</code> 上</li><li>用户在调用时可传入参数以覆盖默认值</li></ol><pre><code class="hljs javascript">$.fn.&lt;pluginName&gt; = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>) </span>&#123;    <span class="hljs-keyword">var</span> bgcolor = options &amp;&amp; options.bgcolor || <span class="hljs-string">&#x27;#FFFFFF&#x27;</span>;    <span class="hljs-built_in">this</span>.css(<span class="hljs-string">&#x27;background&#x27;</span>, bgcolor)    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;&#125;</code></pre><p><code>extend(target, obj1, obj2, ...)</code> 会将靠后对象的值合并到第一个 target 中, 越往后面的对象优先级越高；</p><p><code>extend(&#123;&#125;, $.fn.&lt;pluginName&gt;.defaults, options)</code></p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>使用 <code>try &#123;...&#125; catch &#123;...&#125; finally &#123;...&#125;</code> 捕获</p><blockquote><p>注意：异步操作时的异常无法在调用处捕获，同样，对于控件的事件处理，在绑定事件的代码处无法捕获事件处理函数的异常。</p></blockquote><h2 id="unerscore"><a href="#unerscore" class="headerlink" title="unerscore"></a>unerscore</h2><p>与 jQuery 类似，提供一套完善的 API, 绑定到 <code>_</code> 变量上。</p><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><h4 id="map-filter"><a href="#map-filter" class="headerlink" title="map/filter"></a>map/filter</h4><p>类似于 Array 的 <code>map/filter</code> 方法</p><ul><li><code>_.map(object, function(value, key) &#123;...&#125;);</code></li><li><code>_.mapObject(object, function(value, key) &#123;...&#125;);</code></li><li><code>_.filter(object, function(value, key) &#123;...&#125;);</code></li></ul><h4 id="every-some"><a href="#every-some" class="headerlink" title="every/some"></a>every/some</h4><p>集合中元素都满足情况，<code>_.every()</code> 返回 <code>true</code>, 集合中部分元素满足情况， <code>_.some()</code> 返回 <code>true</code></p><ul><li><code>_.every([1, 4, 7, -3, -9], (x) =&gt; x &gt; 0); // false</code></li><li><code>_.some([1, 4, 7, -3, -9], (x) =&gt; x &gt; 0); // true</code></li></ul><h4 id="max-min"><a href="#max-min" class="headerlink" title="max/min"></a>max/min</h4><p>集合时 Object，会忽略掉 key，只比较 value</p><p><code>_.max(&#123; a: 1, b: 2, c: 3 &#125;); // 3</code></p><h4 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h4><p><code>_.groupBy([1, 2, 3, 4, 5], (x) =&gt; &#123; if(x&lt;3) return &#39;small&#39;; else return &#39;big&#39; &#125;);</code></p><p>更多 <a href="https://underscorejs.org/">underscrore 方法</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 学习笔记</title>
    <link href="/2019/09/16/study-notes/git/"/>
    <url>/2019/09/16/study-notes/git/</url>
    
    <content type="html"><![CDATA[<img src="/2019/09/16/study-notes/git/github-git-cheat-sheet-1.png" class="" title="cheat-sheet-1"><img src="/2019/09/16/study-notes/git/github-git-cheat-sheet-2.png" class="" title="cheat-sheet-2"><a id="more"></a><h2 id="Git-介绍"><a href="#Git-介绍" class="headerlink" title="Git 介绍"></a>Git 介绍</h2><ul><li><p>Git 是分布式版本控制系统</p></li><li><p>集中式 VS 分布式，SVN VS Git</p><ol><li><p>SVN 和 Git 主要的区别在于历史版本维护的位置;</p></li><li><p>Git 本地仓库包含代码库还有历史库，在本地的环境开发就可以记录历史而 SVN 的历史库存在于中央仓库，每次对比与提交代码都必须连接到中央仓库才能进行;</p></li><li><p>这样的好处在于：</p><ul><li>自己可以在脱机环境查看开发的版本历史。</li><li>多人开发时如果充当中央仓库的 Git 仓库挂了，可以随时创建一个新的中央仓库然后同步就立刻恢复了中央库。</li></ul></li></ol></li></ul><h2 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h2><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><pre><code class="hljs base">$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot;</code></pre><p><code>git config</code>命令的<code>--global</code>参数，表明这台机器上的所有 Git 仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和邮箱地址。</p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><h4 id="初始化一个-Git-仓库"><a href="#初始化一个-Git-仓库" class="headerlink" title="初始化一个 Git 仓库"></a>初始化一个 Git 仓库</h4><pre><code class="hljs bash">$ git init</code></pre><h4 id="添加文件到-Git-仓库"><a href="#添加文件到-Git-仓库" class="headerlink" title="添加文件到 Git 仓库"></a>添加文件到 Git 仓库</h4><p>包括两步：</p><pre><code class="hljs bash">$ git add &lt;file&gt;$ git commit -m <span class="hljs-string">&quot;description&quot;</span></code></pre><p><code>git add</code>可以反复多次使用，添加多个文件，<code>git commit</code>可以一次提交很多文件，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容。</p><h3 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h3><pre><code class="hljs bash">$ git status</code></pre><h3 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h3><pre><code class="hljs bash">$ git diff</code></pre><pre><code class="hljs bash">$ git diff --cached</code></pre><pre><code class="hljs bash">$ git diff HEAD -- &lt;file&gt;</code></pre><ul><li><code>git diff</code> 可以查看工作区(work dict)和暂存区(stage)的区别</li><li><code>git diff --cached</code> 可以查看暂存区(stage)和分支(master)的区别</li><li><code>git diff HEAD -- &lt;file&gt;</code> 可以查看工作区和版本库里面最新版本的区别</li></ul><h3 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h3><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span></code></pre><p>简化日志输出信息</p><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span> --pretty=oneline</code></pre><h3 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h3><pre><code class="hljs bash">$ git reflog</code></pre><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><pre><code class="hljs bash">$ git reset --hard HEAD^</code></pre><p>以上命令是返回上一个版本，在 Git 中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本是<code>HEAD^^</code>，往上 100 个版本写成<code>HEAD~100</code>。</p><h3 id="回退指定版本号"><a href="#回退指定版本号" class="headerlink" title="回退指定版本号"></a>回退指定版本号</h3><pre><code class="hljs bash">$ git reset --hard commit_id</code></pre><p>commit_id 是版本号，是一个用 SHA1 计算出的序列</p><h3 id="工作区、暂存区和版本库"><a href="#工作区、暂存区和版本库" class="headerlink" title="工作区、暂存区和版本库"></a>工作区、暂存区和版本库</h3><p>工作区：在电脑里能看到的目录；<br>版本库：在工作区有一个隐藏目录<code>.git</code>，是 Git 的版本库。<br>Git 的版本库中存了很多东西，其中最重要的就是称为 stage（或者称为 index）的暂存区，还有 Git 自动创建的<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>。<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0" alt="理解"><br>进一步解释一些命令：</p><ul><li><code>git add</code>实际上是把文件添加到暂存区</li><li><code>git commit</code>实际上是把暂存区的所有内容提交到当前分支</li></ul><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h4 id="丢弃工作区的修改"><a href="#丢弃工作区的修改" class="headerlink" title="丢弃工作区的修改"></a>丢弃工作区的修改</h4><pre><code class="hljs bash">$ git checkout -- &lt;file&gt;</code></pre><p>该命令是指将文件在工作区的修改全部撤销，这里有两种情况：</p><ol><li>一种是 file 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li>一种是 file 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li></ol><p>总之，就是让这个文件回到最近一次 git commit 或 git add 时的状态。</p><h4 id="丢弃暂存区的修改"><a href="#丢弃暂存区的修改" class="headerlink" title="丢弃暂存区的修改"></a>丢弃暂存区的修改</h4><p>分两步：</p><p>第一步，把暂存区的修改撤销掉(unstage)，重新放回工作区：</p><pre><code class="hljs bash">$ git reset HEAD &lt;file&gt;</code></pre><p>第二步，撤销工作区的修改</p><pre><code class="hljs bash">$ git checkout -- &lt;file&gt;</code></pre><p>小结：</p><ol><li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- &lt;file&gt;</code>。</li><li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了第一步，第二步按第一步操作。</li><li>已经提交了不合适的修改到版本库时，想要撤销本次提交，进行版本回退，前提是没有推送到远程库。</li></ol><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><pre><code class="hljs bash">$ git rm &lt;file&gt;</code></pre><p><code>git rm &lt;file&gt;</code>相当于执行</p><pre><code class="hljs bash">$ rm &lt;file&gt;$ git add &lt;file&gt;</code></pre><h4 id="进一步的解释"><a href="#进一步的解释" class="headerlink" title="进一步的解释"></a>进一步的解释</h4><p>Q：比如执行了<code>rm text.txt</code> 误删了怎么恢复？<br>A：执行<code>git checkout -- text.txt</code> 把版本库的东西重新写回工作区就行了<br>Q：如果执行了<code>git rm text.txt</code>我们会发现工作区的 text.txt 也删除了，怎么恢复？<br>A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区</p><pre><code class="hljs bash">$ git reset head text.txt$ git checkout -- text.txt</code></pre><p>Q：如果真的想从版本库里面删除文件怎么做？<br>A：执行<code>git commit -m &quot;delete text.txt&quot;</code>，提交后最新的版本库将不包含这个文件</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><h4 id="创建-SSH-Key"><a href="#创建-SSH-Key" class="headerlink" title="创建 SSH Key"></a>创建 SSH Key</h4><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span></code></pre><h4 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h4><pre><code class="hljs bash">$ git remote add origin https://github.com/username/repositoryname.git</code></pre><h4 id="关联多个远程仓库"><a href="#关联多个远程仓库" class="headerlink" title="关联多个远程仓库"></a>关联多个远程仓库</h4><pre><code class="hljs bash">$ git remote add upstream https://github.com/username/repositoryname2.git</code></pre><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><pre><code class="hljs bash">$ git push -u origin master</code></pre><p><code>-u</code> 表示第一次推送 master 分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改。</p><h4 id="从远程克隆"><a href="#从远程克隆" class="headerlink" title="从远程克隆"></a>从远程克隆</h4><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/usern/repositoryname.git</code></pre><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><pre><code class="hljs bash">$ git branch &lt;branchname&gt;</code></pre><h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4><pre><code class="hljs bash">$ git branch</code></pre><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个*号。</p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><pre><code class="hljs bash">$ git checkout &lt;branchname&gt;</code></pre><h4 id="创建-切换分支"><a href="#创建-切换分支" class="headerlink" title="创建+切换分支"></a>创建+切换分支</h4><pre><code class="hljs bash">$ git checkout -b &lt;branchname&gt;</code></pre><h4 id="合并某分支到当前分支"><a href="#合并某分支到当前分支" class="headerlink" title="合并某分支到当前分支"></a>合并某分支到当前分支</h4><pre><code class="hljs bash">$ git merge &lt;branchname&gt;</code></pre><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><pre><code class="hljs bash">$ git branch -d &lt;branchname&gt;</code></pre><h4 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h4><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span> --graph</code></pre><p>当 Git 无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。用<code>git log --graph</code>命令可以看到分支合并图。</p><h4 id="普通模式合并分支"><a href="#普通模式合并分支" class="headerlink" title="普通模式合并分支"></a>普通模式合并分支</h4><pre><code class="hljs bash">$ git merge --no-ff -m <span class="hljs-string">&quot;description&quot;</span> &lt;branchname&gt;</code></pre><p>因为本次合并要创建一个新的 commit，所以加上<code>-m</code>参数，把 commit 描述写进去。合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而 fast forward 合并就看不出来曾经做过合并。</p><h4 id="保存工作现场"><a href="#保存工作现场" class="headerlink" title="保存工作现场"></a>保存工作现场</h4><pre><code class="hljs bash">$ git stash</code></pre><h4 id="查看工作现场"><a href="#查看工作现场" class="headerlink" title="查看工作现场"></a>查看工作现场</h4><pre><code class="hljs bash">$ git stash list</code></pre><h4 id="恢复工作现场"><a href="#恢复工作现场" class="headerlink" title="恢复工作现场"></a>恢复工作现场</h4><pre><code class="hljs bash">$ git stash pop</code></pre><h4 id="丢弃一个没有合并过的分支"><a href="#丢弃一个没有合并过的分支" class="headerlink" title="丢弃一个没有合并过的分支"></a>丢弃一个没有合并过的分支</h4><pre><code class="hljs bash">$ git branch -D &lt;branchname&gt;</code></pre><h4 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h4><pre><code class="hljs bash">$ git remote -v</code></pre><h4 id="在本地创建和远程分支对应的分支"><a href="#在本地创建和远程分支对应的分支" class="headerlink" title="在本地创建和远程分支对应的分支"></a>在本地创建和远程分支对应的分支</h4><pre><code class="hljs bash">$ git checkout -b branch-name origin/branch-name，</code></pre><p>本地和远程分支的名称最好一致；</p><h4 id="建立本地分支和远程分支的关联"><a href="#建立本地分支和远程分支的关联" class="headerlink" title="建立本地分支和远程分支的关联"></a>建立本地分支和远程分支的关联</h4><pre><code class="hljs bash">$ git branch --<span class="hljs-built_in">set</span>-upstream branch-name origin/branch-name；</code></pre><h4 id="从本地推送分支"><a href="#从本地推送分支" class="headerlink" title="从本地推送分支"></a>从本地推送分支</h4><pre><code class="hljs bash">$ git push origin branch-name</code></pre><p>如果推送失败，先用 git pull 抓取远程的新提交；</p><h4 id="从远程抓取分支"><a href="#从远程抓取分支" class="headerlink" title="从远程抓取分支"></a>从远程抓取分支</h4><pre><code class="hljs bash">$ git pull</code></pre><p>如果有冲突，要先处理冲突。</p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑在一起。</p><h4 id="新建一个标签"><a href="#新建一个标签" class="headerlink" title="新建一个标签"></a>新建一个标签</h4><pre><code class="hljs bash">$ git tag &lt;tagname&gt;</code></pre><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为 HEAD，也可以指定一个 commit id。</p><h4 id="指定标签信息"><a href="#指定标签信息" class="headerlink" title="指定标签信息"></a>指定标签信息</h4><pre><code class="hljs bash">$ git tag -a &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</code></pre><p><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息。</p><h4 id="PGP-签名标签"><a href="#PGP-签名标签" class="headerlink" title="PGP 签名标签"></a>PGP 签名标签</h4><pre><code class="hljs bash">$ git tag -s &lt;tagname&gt; -m &lt;description&gt; &lt;branchname&gt; or commit_id</code></pre><p><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用 PGP 签名标签。</p><h4 id="查看所有标签"><a href="#查看所有标签" class="headerlink" title="查看所有标签"></a>查看所有标签</h4><pre><code class="hljs bash">$ git tag</code></pre><h4 id="推送一个本地标签"><a href="#推送一个本地标签" class="headerlink" title="推送一个本地标签"></a>推送一个本地标签</h4><pre><code class="hljs bash">$ git push origin &lt;tagname&gt;</code></pre><h4 id="推送全部未推送过的本地标签"><a href="#推送全部未推送过的本地标签" class="headerlink" title="推送全部未推送过的本地标签"></a>推送全部未推送过的本地标签</h4><pre><code class="hljs bash">$ git push origin --tags</code></pre><h4 id="删除一个本地标签"><a href="#删除一个本地标签" class="headerlink" title="删除一个本地标签"></a>删除一个本地标签</h4><pre><code class="hljs bash">$ git tag -d &lt;tagname&gt;</code></pre><h4 id="删除一个远程标签"><a href="#删除一个远程标签" class="headerlink" title="删除一个远程标签"></a>删除一个远程标签</h4><pre><code class="hljs bash">$ git push origin :refs/tags/&lt;tagname&gt;</code></pre><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>通过 <code>.gitignore</code> 文件控制追踪的文件。</p><p>Template： <a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><pre><code class="hljs bash">git config --global <span class="hljs-built_in">alias</span>.&lt;<span class="hljs-built_in">alias</span>&gt; &lt;fullName&gt;</code></pre><p><code>--global</code> 表明针对当前用户，如果不加，则只对当前仓库起作用，配置文件 config 在 <code>.git/config</code> 文件中。</p><p>好用的 git log alias: <code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p><h2 id="搭建-Git-私有仓库"><a href="#搭建-Git-私有仓库" class="headerlink" title="搭建 Git 私有仓库"></a>搭建 Git 私有仓库</h2><ul><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600/899998870925664">搭建 Git 服务器</a></li><li>要方便管理公钥，用 <a href="https://github.com/sitaramc/gitolite">Gitosis</a>；</li><li>要像 SVN 那样变态地控制权限，用 <a href="https://github.com/sitaramc/gitolite">Gitolite</a></li></ul><h2 id="Git-Cheat-Sheet"><a href="#Git-Cheat-Sheet" class="headerlink" title="Git Cheat Sheet"></a>Git Cheat Sheet</h2><img src="/2019/09/16/study-notes/git/github-git-cheat-sheet-1.png" class="" title="cheat-sheet-1"><img src="/2019/09/16/study-notes/git/github-git-cheat-sheet-2.png" class="" title="cheat-sheet-2"><!--![github-git-cheat-sheet](git/github-git-cheat-sheet-1.png)--><!--![github-git-cheat-sheet](git/github-git-cheat-sheet-2.png)-->]]></content>
    
    
    <categories>
      
      <category>Study Notes</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
